using UnityEngine;
using System.Collections;

public class Challenger : MonoBehaviour {

	//Player objects
	private GameObject dog;
	private GameObject walker;

	private float timer;
	public float challengeTimer;
	public int challengeType;

	public float tension;

	public int walkerCounter;
	public int dogCounter;

	public bool walkerAlternate = false;
	public bool dogAlternate = false;

	public int walkerScore;
	public int dogScore;
	
	//subscribes to the input events when object is enabled
	void OnEnable(){
		GUIManager.onWalkerAPressed += onWalkerAPressed;
		GUIManager.onWalkerBPressed += onWalkerBPressed;

		GUIManager.onDogAPressed += onDogAPressed;
		GUIManager.onDogBPressed += onDogBPressed;
	}
	//unsubscribes to the input events when object is disabled
	void OnDisable(){
		GUIManager.onWalkerAPressed -= onWalkerAPressed;
		GUIManager.onWalkerBPressed -= onWalkerBPressed;

		GUIManager.onDogAPressed -= onDogAPressed;
		GUIManager.onDogBPressed -= onDogBPressed;
	}


	//Finds the player objects
	void Awake(){

		dogCounter = 0;
		walkerCounter = 0;

		walkerScore = 0;
		dogScore = 0;

		//Checks to make sure walker is not null before assigning
		if(GameObject.FindGameObjectWithTag(Tags.walker) != null){
			walker = GameObject.FindGameObjectWithTag(Tags.walker);
		}
		//Checks to make sure dog is not null before assigning
		if(GameObject.FindGameObjectWithTag(Tags.dog) != null){
			dog = GameObject.FindGameObjectWithTag(Tags.dog);
		}
	}

	// Use this for initialization
	void Start () {
		timer += Time.deltaTime;
		resetCounters ();
	}
	
	// Update is called once per frame
	void Update () {
		//Debug.Log ("About to choose a challenge");
		//Challenge is determined with object is spawned in the spawner script
		switch (challengeType){
		case 1:
			timer = 0;
			StartCoroutine(CarChallenge());
			if (timer >= 1000)
				challengeType = 0;
			break;
		case 2:
			//This is temporary
			timer = 0;
			StartCoroutine(CarChallenge());
			if (timer >= 1000)
				challengeType = 0;
			break;
		}

	
	}

	IEnumerator CarChallenge(){

		Debug.Log("Car challenge starting"); 	

//if timer > 3 goto end condition and exit
		//4 seconds to battle with quick taps. 
		//It is important that the check is only done and processed AFTER the 
		//time has elapsed. This is opposed to making checks every second the event is happening. 
		if(challengeTimer>=4)
		{
			if (dogCounter >= 20){
				dogScore++;
			}
			
			if(dogCounter<=0){
				walkerScore++;
			}else if (dogCounter >= 20)
			{
				dogScore++;
				
			}
			else{
				tension += dogCounter;
			}
			resetCounters();
			tensionCheck();
			yield break;
		}

		challengeTimer += Time.deltaTime;
	}

	IEnumerator SquirrelChallenge(){
		//Not much to say, this is incomplete.
		Debug.Log("Squirrel challenge starting"); 	
		resetCounters ();
		//if timer > 3 goto end condition and exit

			if (dogCounter >= 1){
				dogScore++;
			}
			
			if (dogCounter <= -1) {
						tension += 10;
			}
			resetCounters();
			tensionCheck();
			yield break;
		
		challengeTimer += Time.deltaTime;
	}

	void tensionCheck()
	{
			if (tension >= 25)
				Debug.Log("DOGE WINS");
	}


	void resetCounters()
	{
		challengeTimer = 0;
		dogCounter = 0;
	}
	public void setChallenge(int challengeNumber)
	{
		challengeType = challengeNumber;
	}

	void onWalkerAPressed(bool isWalkerAPressed){
		if(isWalkerAPressed){
			//Debug.Log("Walker Stop");
			switch (challengeType){
			case 1:
				if(walkerAlternate){
					dogCounter--;
					walkerAlternate = !walkerAlternate;
				}
				break;
			}
		}
	}
	
	void onWalkerBPressed(bool isWalkerBPressed){
		if(isWalkerBPressed){
			//Debug.Log("Walker Treat");
			switch (challengeType){
			case 1:
				if(!walkerAlternate){
					dogCounter--;
					walkerAlternate = !walkerAlternate;
				}
				break;
			}
		}
	}

	void onDogAPressed( bool isDogAPressed )
	{
		if (isDogAPressed)
		{
			//Debug.Log("Dog Run");
			switch (challengeType){
			case 1:
				if(dogAlternate){
					dogCounter++;
					dogAlternate = !dogAlternate;
				}
				break;
			}
		}
		
	}
	
	void onDogBPressed( bool isDogBPressed )
	{
		if (isDogBPressed)
		{
			switch (challengeType){
			case 1:
				if(!dogAlternate){
					dogCounter++;
					dogAlternate = !dogAlternate;
				}
				break;
			}
		}
		
	}
}